=== tests/cases/conformance/controlFlow/controlFlowIfStatement.ts ===
let x: string | number | boolean | RegExp;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

let cond: boolean;
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 1, 3))

x = /a/;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))

if (x /* RegExp */, (x = true)) {
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))

    x; // boolean
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))

    x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))
}
else {
    x; // boolean
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))

    x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))
}
x; // string | number
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 0, 3))

function a() {
>a : Symbol(a, Decl(controlFlowIfStatement.ts, 12, 2))

    let x: string | number;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 15, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 1, 3))

        x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 15, 7))
    }
    else {
        x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 15, 7))

        return;
    }
    x; // number
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 15, 7))
}
function b() {
>b : Symbol(b, Decl(controlFlowIfStatement.ts, 24, 1))

    let x: string | number;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 26, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 1, 3))

        x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 26, 7))

        throw "";
    }
    else {
        x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 26, 7))
    }
    x; // string
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 26, 7))
}

